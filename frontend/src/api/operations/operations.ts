/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "react-query";
import type {
  ActiveOrderScheme,
  CancelOrderScheme,
  DefaultResponse,
  HTTPValidationError,
  ListOperationsApiV1SubaccountsSubaccountIdOperationsGetParams,
  OperationStats,
  OrderCreate,
  PageOperationScheme,
  RevenueStats,
} from "../../models";
import { customInstance } from ".././axios";
import type { ErrorType } from ".././axios";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary List Operations
 */
export const listOperationsApiV1SubaccountsSubaccountIdOperationsGet = (
  subaccountId: number,
  params?: ListOperationsApiV1SubaccountsSubaccountIdOperationsGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PageOperationScheme>(
    {
      url: `/api/v1/subaccounts/${subaccountId}/operations`,
      method: "GET",
      params,
      signal,
    },
    options
  );
};

export const getListOperationsApiV1SubaccountsSubaccountIdOperationsGetQueryKey =
  (
    subaccountId: number,
    params?: ListOperationsApiV1SubaccountsSubaccountIdOperationsGetParams
  ) => {
    return [
      `/api/v1/subaccounts/${subaccountId}/operations`,
      ...(params ? [params] : []),
    ] as const;
  };

export const getListOperationsApiV1SubaccountsSubaccountIdOperationsGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof listOperationsApiV1SubaccountsSubaccountIdOperationsGet>
    >,
    TError = ErrorType<HTTPValidationError>
  >(
    subaccountId: number,
    params?: ListOperationsApiV1SubaccountsSubaccountIdOperationsGetParams,
    options?: {
      query?: UseQueryOptions<
        Awaited<
          ReturnType<
            typeof listOperationsApiV1SubaccountsSubaccountIdOperationsGet
          >
        >,
        TError,
        TData
      >;
      request?: SecondParameter<typeof customInstance>;
    }
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getListOperationsApiV1SubaccountsSubaccountIdOperationsGetQueryKey(
        subaccountId,
        params
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof listOperationsApiV1SubaccountsSubaccountIdOperationsGet
        >
      >
    > = ({ signal }) =>
      listOperationsApiV1SubaccountsSubaccountIdOperationsGet(
        subaccountId,
        params,
        requestOptions,
        signal
      );

    return {
      queryKey,
      queryFn,
      enabled: !!subaccountId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof listOperationsApiV1SubaccountsSubaccountIdOperationsGet
        >
      >,
      TError,
      TData
    > & { queryKey: QueryKey };
  };

export type ListOperationsApiV1SubaccountsSubaccountIdOperationsGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof listOperationsApiV1SubaccountsSubaccountIdOperationsGet>
    >
  >;
export type ListOperationsApiV1SubaccountsSubaccountIdOperationsGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary List Operations
 */
export const useListOperationsApiV1SubaccountsSubaccountIdOperationsGet = <
  TData = Awaited<
    ReturnType<typeof listOperationsApiV1SubaccountsSubaccountIdOperationsGet>
  >,
  TError = ErrorType<HTTPValidationError>
>(
  subaccountId: number,
  params?: ListOperationsApiV1SubaccountsSubaccountIdOperationsGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<
          typeof listOperationsApiV1SubaccountsSubaccountIdOperationsGet
        >
      >,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getListOperationsApiV1SubaccountsSubaccountIdOperationsGetQueryOptions(
      subaccountId,
      params,
      options
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary List Active Orders
 */
export const listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet = (
  subaccountId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ActiveOrderScheme[]>(
    {
      url: `/api/v1/subaccounts/${subaccountId}/active-orders`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getListActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGetQueryKey =
  (subaccountId: number) => {
    return [`/api/v1/subaccounts/${subaccountId}/active-orders`] as const;
  };

export const getListActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet
      >
    >,
    TError = ErrorType<HTTPValidationError>
  >(
    subaccountId: number,
    options?: {
      query?: UseQueryOptions<
        Awaited<
          ReturnType<
            typeof listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet
          >
        >,
        TError,
        TData
      >;
      request?: SecondParameter<typeof customInstance>;
    }
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getListActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGetQueryKey(
        subaccountId
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet
        >
      >
    > = ({ signal }) =>
      listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet(
        subaccountId,
        requestOptions,
        signal
      );

    return {
      queryKey,
      queryFn,
      enabled: !!subaccountId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet
        >
      >,
      TError,
      TData
    > & { queryKey: QueryKey };
  };

export type ListActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet
      >
    >
  >;
export type ListActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary List Active Orders
 */
export const useListActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet = <
  TData = Awaited<
    ReturnType<
      typeof listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet
    >
  >,
  TError = ErrorType<HTTPValidationError>
>(
  subaccountId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<
          typeof listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet
        >
      >,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getListActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGetQueryOptions(
      subaccountId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create Order
 */
export const createOrderApiV1SubaccountsSubaccountIdActiveOrdersPost = (
  subaccountId: number,
  orderCreate: OrderCreate,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<DefaultResponse>(
    {
      url: `/api/v1/subaccounts/${subaccountId}/active-orders`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: orderCreate,
    },
    options
  );
};

export const getCreateOrderApiV1SubaccountsSubaccountIdActiveOrdersPostMutationOptions =
  <TError = ErrorType<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof createOrderApiV1SubaccountsSubaccountIdActiveOrdersPost
        >
      >,
      TError,
      { subaccountId: number; data: OrderCreate },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof createOrderApiV1SubaccountsSubaccountIdActiveOrdersPost>
    >,
    TError,
    { subaccountId: number; data: OrderCreate },
    TContext
  > => {
    const { mutation: mutationOptions, request: requestOptions } =
      options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof createOrderApiV1SubaccountsSubaccountIdActiveOrdersPost
        >
      >,
      { subaccountId: number; data: OrderCreate }
    > = (props) => {
      const { subaccountId, data } = props ?? {};

      return createOrderApiV1SubaccountsSubaccountIdActiveOrdersPost(
        subaccountId,
        data,
        requestOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type CreateOrderApiV1SubaccountsSubaccountIdActiveOrdersPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof createOrderApiV1SubaccountsSubaccountIdActiveOrdersPost>
    >
  >;
export type CreateOrderApiV1SubaccountsSubaccountIdActiveOrdersPostMutationBody =
  OrderCreate;
export type CreateOrderApiV1SubaccountsSubaccountIdActiveOrdersPostMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Create Order
 */
export const useCreateOrderApiV1SubaccountsSubaccountIdActiveOrdersPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof createOrderApiV1SubaccountsSubaccountIdActiveOrdersPost>
    >,
    TError,
    { subaccountId: number; data: OrderCreate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getCreateOrderApiV1SubaccountsSubaccountIdActiveOrdersPostMutationOptions(
      options
    );

  return useMutation(mutationOptions);
};
/**
 * @summary Get Daily Operations Stats
 */
export const getDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGet =
  (
    subaccountId: number,
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal
  ) => {
    return customInstance<OperationStats>(
      {
        url: `/api/v1/subaccounts/${subaccountId}/stats/operations`,
        method: "GET",
        signal,
      },
      options
    );
  };

export const getGetDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGetQueryKey =
  (subaccountId: number) => {
    return [`/api/v1/subaccounts/${subaccountId}/stats/operations`] as const;
  };

export const getGetDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGet
      >
    >,
    TError = ErrorType<HTTPValidationError>
  >(
    subaccountId: number,
    options?: {
      query?: UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGet
          >
        >,
        TError,
        TData
      >;
      request?: SecondParameter<typeof customInstance>;
    }
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGetQueryKey(
        subaccountId
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGet
        >
      >
    > = ({ signal }) =>
      getDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGet(
        subaccountId,
        requestOptions,
        signal
      );

    return {
      queryKey,
      queryFn,
      enabled: !!subaccountId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGet
        >
      >,
      TError,
      TData
    > & { queryKey: QueryKey };
  };

export type GetDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGet
      >
    >
  >;
export type GetDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Get Daily Operations Stats
 */
export const useGetDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGet =
  <
    TData = Awaited<
      ReturnType<
        typeof getDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGet
      >
    >,
    TError = ErrorType<HTTPValidationError>
  >(
    subaccountId: number,
    options?: {
      query?: UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGet
          >
        >,
        TError,
        TData
      >;
      request?: SecondParameter<typeof customInstance>;
    }
  ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
      getGetDailyOperationsStatsApiV1SubaccountsSubaccountIdStatsOperationsGetQueryOptions(
        subaccountId,
        options
      );

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
      queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
  };

/**
 * @summary Get Portfolio Revenue
 */
export const getPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGet = (
  subaccountId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<RevenueStats>(
    {
      url: `/api/v1/subaccounts/${subaccountId}/stats/revenue`,
      method: "GET",
      signal,
    },
    options
  );
};

export const getGetPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGetQueryKey =
  (subaccountId: number) => {
    return [`/api/v1/subaccounts/${subaccountId}/stats/revenue`] as const;
  };

export const getGetPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGet
      >
    >,
    TError = ErrorType<HTTPValidationError>
  >(
    subaccountId: number,
    options?: {
      query?: UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGet
          >
        >,
        TError,
        TData
      >;
      request?: SecondParameter<typeof customInstance>;
    }
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGetQueryKey(
        subaccountId
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGet
        >
      >
    > = ({ signal }) =>
      getPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGet(
        subaccountId,
        requestOptions,
        signal
      );

    return {
      queryKey,
      queryFn,
      enabled: !!subaccountId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGet
        >
      >,
      TError,
      TData
    > & { queryKey: QueryKey };
  };

export type GetPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGet
      >
    >
  >;
export type GetPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Get Portfolio Revenue
 */
export const useGetPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGet =
  <
    TData = Awaited<
      ReturnType<
        typeof getPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGet
      >
    >,
    TError = ErrorType<HTTPValidationError>
  >(
    subaccountId: number,
    options?: {
      query?: UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGet
          >
        >,
        TError,
        TData
      >;
      request?: SecondParameter<typeof customInstance>;
    }
  ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
      getGetPortfolioRevenueApiV1SubaccountsSubaccountIdStatsRevenueGetQueryOptions(
        subaccountId,
        options
      );

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
      queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
  };

/**
 * @summary Cancel Order
 */
export const cancelOrderApiV1CancelPost = (
  cancelOrderScheme: CancelOrderScheme,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<boolean>(
    {
      url: `/api/v1/cancel`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: cancelOrderScheme,
    },
    options
  );
};

export const getCancelOrderApiV1CancelPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cancelOrderApiV1CancelPost>>,
    TError,
    { data: CancelOrderScheme },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof cancelOrderApiV1CancelPost>>,
  TError,
  { data: CancelOrderScheme },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cancelOrderApiV1CancelPost>>,
    { data: CancelOrderScheme }
  > = (props) => {
    const { data } = props ?? {};

    return cancelOrderApiV1CancelPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CancelOrderApiV1CancelPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof cancelOrderApiV1CancelPost>>
>;
export type CancelOrderApiV1CancelPostMutationBody = CancelOrderScheme;
export type CancelOrderApiV1CancelPostMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Cancel Order
 */
export const useCancelOrderApiV1CancelPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cancelOrderApiV1CancelPost>>,
    TError,
    { data: CancelOrderScheme },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getCancelOrderApiV1CancelPostMutationOptions(options);

  return useMutation(mutationOptions);
};
