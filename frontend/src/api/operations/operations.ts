/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from 'react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  OperationScheme,
  HTTPValidationError,
  ListOperationsApiV1SubaccountsSubaccountIdOperationsGetParams,
  ActiveOrderScheme
} from '../../models'
import { customInstance } from '.././axios'
import type { ErrorType } from '.././axios'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary List Operations
 */
export const listOperationsApiV1SubaccountsSubaccountIdOperationsGet = (
    subaccountId: number,
    params?: ListOperationsApiV1SubaccountsSubaccountIdOperationsGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<OperationScheme[]>(
      {url: `/api/v1/subaccounts/${subaccountId}/operations`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getListOperationsApiV1SubaccountsSubaccountIdOperationsGetQueryKey = (subaccountId: number,
    params?: ListOperationsApiV1SubaccountsSubaccountIdOperationsGetParams,) => [`/api/v1/subaccounts/${subaccountId}/operations`, ...(params ? [params]: [])];

    
export type ListOperationsApiV1SubaccountsSubaccountIdOperationsGetQueryResult = NonNullable<Awaited<ReturnType<typeof listOperationsApiV1SubaccountsSubaccountIdOperationsGet>>>
export type ListOperationsApiV1SubaccountsSubaccountIdOperationsGetQueryError = ErrorType<HTTPValidationError>

export const useListOperationsApiV1SubaccountsSubaccountIdOperationsGet = <TData = Awaited<ReturnType<typeof listOperationsApiV1SubaccountsSubaccountIdOperationsGet>>, TError = ErrorType<HTTPValidationError>>(
 subaccountId: number,
    params?: ListOperationsApiV1SubaccountsSubaccountIdOperationsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listOperationsApiV1SubaccountsSubaccountIdOperationsGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListOperationsApiV1SubaccountsSubaccountIdOperationsGetQueryKey(subaccountId,params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listOperationsApiV1SubaccountsSubaccountIdOperationsGet>>> = ({ signal }) => listOperationsApiV1SubaccountsSubaccountIdOperationsGet(subaccountId,params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof listOperationsApiV1SubaccountsSubaccountIdOperationsGet>>, TError, TData>(queryKey, queryFn, {enabled: !!(subaccountId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary List Active Orders
 */
export const listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet = (
    subaccountId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<ActiveOrderScheme[]>(
      {url: `/api/v1/subaccounts/${subaccountId}/active-orders`, method: 'get', signal
    },
      options);
    }
  

export const getListActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGetQueryKey = (subaccountId: number,) => [`/api/v1/subaccounts/${subaccountId}/active-orders`];

    
export type ListActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGetQueryResult = NonNullable<Awaited<ReturnType<typeof listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet>>>
export type ListActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGetQueryError = ErrorType<HTTPValidationError>

export const useListActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet = <TData = Awaited<ReturnType<typeof listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet>>, TError = ErrorType<HTTPValidationError>>(
 subaccountId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGetQueryKey(subaccountId);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet>>> = ({ signal }) => listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet(subaccountId, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof listActiveOrdersApiV1SubaccountsSubaccountIdActiveOrdersGet>>, TError, TData>(queryKey, queryFn, {enabled: !!(subaccountId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

