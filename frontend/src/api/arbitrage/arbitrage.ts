/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from 'react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  ArbitrageResult,
  HTTPValidationError,
  GetArbitrageDealsApiV1ArbitrageRateGetParams
} from '../../models'
import { customInstance } from '.././axios'
import type { ErrorType } from '.././axios'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Get Arbitrage Deals
 */
export const getArbitrageDealsApiV1ArbitrageRateGet = (
    params: GetArbitrageDealsApiV1ArbitrageRateGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<ArbitrageResult[]>(
      {url: `/api/v1/arbitrage-rate`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetArbitrageDealsApiV1ArbitrageRateGetQueryKey = (params: GetArbitrageDealsApiV1ArbitrageRateGetParams,) => [`/api/v1/arbitrage-rate`, ...(params ? [params]: [])];

    
export type GetArbitrageDealsApiV1ArbitrageRateGetQueryResult = NonNullable<Awaited<ReturnType<typeof getArbitrageDealsApiV1ArbitrageRateGet>>>
export type GetArbitrageDealsApiV1ArbitrageRateGetQueryError = ErrorType<HTTPValidationError>

export const useGetArbitrageDealsApiV1ArbitrageRateGet = <TData = Awaited<ReturnType<typeof getArbitrageDealsApiV1ArbitrageRateGet>>, TError = ErrorType<HTTPValidationError>>(
 params: GetArbitrageDealsApiV1ArbitrageRateGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getArbitrageDealsApiV1ArbitrageRateGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetArbitrageDealsApiV1ArbitrageRateGetQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArbitrageDealsApiV1ArbitrageRateGet>>> = ({ signal }) => getArbitrageDealsApiV1ArbitrageRateGet(params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof getArbitrageDealsApiV1ArbitrageRateGet>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

