/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "react-query";
import type {
  HTTPValidationError,
  ListArbitrageDeltasApiV1ArbitrageDeltasGetParams,
  PageArbitrageDeltasScheme,
} from "../../models";
import { customInstance } from ".././axios";
import type { ErrorType } from ".././axios";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary List Arbitrage Deltas
 */
export const listArbitrageDeltasApiV1ArbitrageDeltasGet = (
  params?: ListArbitrageDeltasApiV1ArbitrageDeltasGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PageArbitrageDeltasScheme>(
    { url: `/api/v1/arbitrage/deltas`, method: "GET", params, signal },
    options
  );
};

export const getListArbitrageDeltasApiV1ArbitrageDeltasGetQueryKey = (
  params?: ListArbitrageDeltasApiV1ArbitrageDeltasGetParams
) => {
  return [`/api/v1/arbitrage/deltas`, ...(params ? [params] : [])] as const;
};

export const getListArbitrageDeltasApiV1ArbitrageDeltasGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof listArbitrageDeltasApiV1ArbitrageDeltasGet>
  >,
  TError = ErrorType<HTTPValidationError>
>(
  params?: ListArbitrageDeltasApiV1ArbitrageDeltasGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listArbitrageDeltasApiV1ArbitrageDeltasGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getListArbitrageDeltasApiV1ArbitrageDeltasGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listArbitrageDeltasApiV1ArbitrageDeltasGet>>
  > = ({ signal }) =>
    listArbitrageDeltasApiV1ArbitrageDeltasGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listArbitrageDeltasApiV1ArbitrageDeltasGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListArbitrageDeltasApiV1ArbitrageDeltasGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listArbitrageDeltasApiV1ArbitrageDeltasGet>>
>;
export type ListArbitrageDeltasApiV1ArbitrageDeltasGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary List Arbitrage Deltas
 */
export const useListArbitrageDeltasApiV1ArbitrageDeltasGet = <
  TData = Awaited<
    ReturnType<typeof listArbitrageDeltasApiV1ArbitrageDeltasGet>
  >,
  TError = ErrorType<HTTPValidationError>
>(
  params?: ListArbitrageDeltasApiV1ArbitrageDeltasGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listArbitrageDeltasApiV1ArbitrageDeltasGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getListArbitrageDeltasApiV1ArbitrageDeltasGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
