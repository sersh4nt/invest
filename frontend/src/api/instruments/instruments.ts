/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from 'react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  PageInstrumentScheme,
  HTTPValidationError,
  ListInstrumentsApiV1InstrumentsGetParams,
  PageInstrumentMetricsScheme,
  ListInstrumentMetricsApiV1InstrumentsMetricsGetParams
} from '../../models'
import { customInstance } from '.././axios'
import type { ErrorType } from '.././axios'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary List Instruments
 */
export const listInstrumentsApiV1InstrumentsGet = (
    params?: ListInstrumentsApiV1InstrumentsGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<PageInstrumentScheme>(
      {url: `/api/v1/instruments`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getListInstrumentsApiV1InstrumentsGetQueryKey = (params?: ListInstrumentsApiV1InstrumentsGetParams,) => [`/api/v1/instruments`, ...(params ? [params]: [])];

    
export type ListInstrumentsApiV1InstrumentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof listInstrumentsApiV1InstrumentsGet>>>
export type ListInstrumentsApiV1InstrumentsGetQueryError = ErrorType<HTTPValidationError>

export const useListInstrumentsApiV1InstrumentsGet = <TData = Awaited<ReturnType<typeof listInstrumentsApiV1InstrumentsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ListInstrumentsApiV1InstrumentsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listInstrumentsApiV1InstrumentsGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListInstrumentsApiV1InstrumentsGetQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listInstrumentsApiV1InstrumentsGet>>> = ({ signal }) => listInstrumentsApiV1InstrumentsGet(params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof listInstrumentsApiV1InstrumentsGet>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary List Instrument Metrics
 */
export const listInstrumentMetricsApiV1InstrumentsMetricsGet = (
    params?: ListInstrumentMetricsApiV1InstrumentsMetricsGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<PageInstrumentMetricsScheme>(
      {url: `/api/v1/instruments/metrics`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getListInstrumentMetricsApiV1InstrumentsMetricsGetQueryKey = (params?: ListInstrumentMetricsApiV1InstrumentsMetricsGetParams,) => [`/api/v1/instruments/metrics`, ...(params ? [params]: [])];

    
export type ListInstrumentMetricsApiV1InstrumentsMetricsGetQueryResult = NonNullable<Awaited<ReturnType<typeof listInstrumentMetricsApiV1InstrumentsMetricsGet>>>
export type ListInstrumentMetricsApiV1InstrumentsMetricsGetQueryError = ErrorType<HTTPValidationError>

export const useListInstrumentMetricsApiV1InstrumentsMetricsGet = <TData = Awaited<ReturnType<typeof listInstrumentMetricsApiV1InstrumentsMetricsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ListInstrumentMetricsApiV1InstrumentsMetricsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listInstrumentMetricsApiV1InstrumentsMetricsGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListInstrumentMetricsApiV1InstrumentsMetricsGetQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listInstrumentMetricsApiV1InstrumentsMetricsGet>>> = ({ signal }) => listInstrumentMetricsApiV1InstrumentsMetricsGet(params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof listInstrumentMetricsApiV1InstrumentsMetricsGet>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

