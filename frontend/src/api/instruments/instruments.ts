/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "react-query";
import type {
  HTTPValidationError,
  ListInstrumentMetricsApiV1InstrumentsMetricsGetParams,
  ListInstrumentsApiV1InstrumentsGetParams,
  PageInstrumentMetricsScheme,
  PageInstrumentScheme,
} from "../../models";
import { customInstance } from ".././axios";
import type { ErrorType } from ".././axios";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary List Instruments
 */
export const listInstrumentsApiV1InstrumentsGet = (
  params?: ListInstrumentsApiV1InstrumentsGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PageInstrumentScheme>(
    { url: `/api/v1/instruments`, method: "GET", params, signal },
    options
  );
};

export const getListInstrumentsApiV1InstrumentsGetQueryKey = (
  params?: ListInstrumentsApiV1InstrumentsGetParams
) => {
  return [`/api/v1/instruments`, ...(params ? [params] : [])] as const;
};

export const getListInstrumentsApiV1InstrumentsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listInstrumentsApiV1InstrumentsGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  params?: ListInstrumentsApiV1InstrumentsGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listInstrumentsApiV1InstrumentsGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getListInstrumentsApiV1InstrumentsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listInstrumentsApiV1InstrumentsGet>>
  > = ({ signal }) =>
    listInstrumentsApiV1InstrumentsGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listInstrumentsApiV1InstrumentsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListInstrumentsApiV1InstrumentsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listInstrumentsApiV1InstrumentsGet>>
>;
export type ListInstrumentsApiV1InstrumentsGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary List Instruments
 */
export const useListInstrumentsApiV1InstrumentsGet = <
  TData = Awaited<ReturnType<typeof listInstrumentsApiV1InstrumentsGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  params?: ListInstrumentsApiV1InstrumentsGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listInstrumentsApiV1InstrumentsGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListInstrumentsApiV1InstrumentsGetQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary List Instrument Metrics
 */
export const listInstrumentMetricsApiV1InstrumentsMetricsGet = (
  params?: ListInstrumentMetricsApiV1InstrumentsMetricsGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PageInstrumentMetricsScheme>(
    { url: `/api/v1/instruments/metrics`, method: "GET", params, signal },
    options
  );
};

export const getListInstrumentMetricsApiV1InstrumentsMetricsGetQueryKey = (
  params?: ListInstrumentMetricsApiV1InstrumentsMetricsGetParams
) => {
  return [`/api/v1/instruments/metrics`, ...(params ? [params] : [])] as const;
};

export const getListInstrumentMetricsApiV1InstrumentsMetricsGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof listInstrumentMetricsApiV1InstrumentsMetricsGet>
  >,
  TError = ErrorType<HTTPValidationError>
>(
  params?: ListInstrumentMetricsApiV1InstrumentsMetricsGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof listInstrumentMetricsApiV1InstrumentsMetricsGet>
      >,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getListInstrumentMetricsApiV1InstrumentsMetricsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listInstrumentMetricsApiV1InstrumentsMetricsGet>>
  > = ({ signal }) =>
    listInstrumentMetricsApiV1InstrumentsMetricsGet(
      params,
      requestOptions,
      signal
    );

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listInstrumentMetricsApiV1InstrumentsMetricsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListInstrumentMetricsApiV1InstrumentsMetricsGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof listInstrumentMetricsApiV1InstrumentsMetricsGet>>
  >;
export type ListInstrumentMetricsApiV1InstrumentsMetricsGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary List Instrument Metrics
 */
export const useListInstrumentMetricsApiV1InstrumentsMetricsGet = <
  TData = Awaited<
    ReturnType<typeof listInstrumentMetricsApiV1InstrumentsMetricsGet>
  >,
  TError = ErrorType<HTTPValidationError>
>(
  params?: ListInstrumentMetricsApiV1InstrumentsMetricsGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof listInstrumentMetricsApiV1InstrumentsMetricsGet>
      >,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getListInstrumentMetricsApiV1InstrumentsMetricsGetQueryOptions(
      params,
      options
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
