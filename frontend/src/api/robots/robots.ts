/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "react-query";
import type {
  ContainerMessage,
  GetWorkerLogsApiV1WorkersWorkerIdLogsGetParams,
  HTTPValidationError,
  ListRobotsApiV1RobotsGetParams,
  ListWorkersApiV1WorkersGetParams,
  PageRobotScheme,
  PageWorkerScheme,
  RobotBacktestScheme,
  WorkerCreate,
  WorkerScheme,
  WorkersStats,
} from "../../models";
import { customInstance } from ".././axios";
import type { ErrorType } from ".././axios";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary List Robots
 */
export const listRobotsApiV1RobotsGet = (
  params?: ListRobotsApiV1RobotsGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PageRobotScheme>(
    { url: `/api/v1/robots`, method: "GET", params, signal },
    options
  );
};

export const getListRobotsApiV1RobotsGetQueryKey = (
  params?: ListRobotsApiV1RobotsGetParams
) => {
  return [`/api/v1/robots`, ...(params ? [params] : [])] as const;
};

export const getListRobotsApiV1RobotsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listRobotsApiV1RobotsGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  params?: ListRobotsApiV1RobotsGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listRobotsApiV1RobotsGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListRobotsApiV1RobotsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listRobotsApiV1RobotsGet>>
  > = ({ signal }) => listRobotsApiV1RobotsGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listRobotsApiV1RobotsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListRobotsApiV1RobotsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listRobotsApiV1RobotsGet>>
>;
export type ListRobotsApiV1RobotsGetQueryError = ErrorType<HTTPValidationError>;

/**
 * @summary List Robots
 */
export const useListRobotsApiV1RobotsGet = <
  TData = Awaited<ReturnType<typeof listRobotsApiV1RobotsGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  params?: ListRobotsApiV1RobotsGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listRobotsApiV1RobotsGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListRobotsApiV1RobotsGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary List Robot Backtests
 */
export const listRobotBacktestsApiV1RobotsRobotIdBacktestsGet = (
  robotId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<RobotBacktestScheme>(
    { url: `/api/v1/robots/${robotId}/backtests`, method: "GET", signal },
    options
  );
};

export const getListRobotBacktestsApiV1RobotsRobotIdBacktestsGetQueryKey = (
  robotId: number
) => {
  return [`/api/v1/robots/${robotId}/backtests`] as const;
};

export const getListRobotBacktestsApiV1RobotsRobotIdBacktestsGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof listRobotBacktestsApiV1RobotsRobotIdBacktestsGet>
  >,
  TError = ErrorType<HTTPValidationError>
>(
  robotId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof listRobotBacktestsApiV1RobotsRobotIdBacktestsGet>
      >,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getListRobotBacktestsApiV1RobotsRobotIdBacktestsGetQueryKey(robotId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listRobotBacktestsApiV1RobotsRobotIdBacktestsGet>>
  > = ({ signal }) =>
    listRobotBacktestsApiV1RobotsRobotIdBacktestsGet(
      robotId,
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    enabled: !!robotId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<
      ReturnType<typeof listRobotBacktestsApiV1RobotsRobotIdBacktestsGet>
    >,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListRobotBacktestsApiV1RobotsRobotIdBacktestsGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof listRobotBacktestsApiV1RobotsRobotIdBacktestsGet>>
  >;
export type ListRobotBacktestsApiV1RobotsRobotIdBacktestsGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary List Robot Backtests
 */
export const useListRobotBacktestsApiV1RobotsRobotIdBacktestsGet = <
  TData = Awaited<
    ReturnType<typeof listRobotBacktestsApiV1RobotsRobotIdBacktestsGet>
  >,
  TError = ErrorType<HTTPValidationError>
>(
  robotId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof listRobotBacktestsApiV1RobotsRobotIdBacktestsGet>
      >,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getListRobotBacktestsApiV1RobotsRobotIdBacktestsGetQueryOptions(
      robotId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary List Workers
 */
export const listWorkersApiV1WorkersGet = (
  params?: ListWorkersApiV1WorkersGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PageWorkerScheme>(
    { url: `/api/v1/workers`, method: "GET", params, signal },
    options
  );
};

export const getListWorkersApiV1WorkersGetQueryKey = (
  params?: ListWorkersApiV1WorkersGetParams
) => {
  return [`/api/v1/workers`, ...(params ? [params] : [])] as const;
};

export const getListWorkersApiV1WorkersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listWorkersApiV1WorkersGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  params?: ListWorkersApiV1WorkersGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listWorkersApiV1WorkersGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListWorkersApiV1WorkersGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listWorkersApiV1WorkersGet>>
  > = ({ signal }) =>
    listWorkersApiV1WorkersGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listWorkersApiV1WorkersGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListWorkersApiV1WorkersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listWorkersApiV1WorkersGet>>
>;
export type ListWorkersApiV1WorkersGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary List Workers
 */
export const useListWorkersApiV1WorkersGet = <
  TData = Awaited<ReturnType<typeof listWorkersApiV1WorkersGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  params?: ListWorkersApiV1WorkersGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listWorkersApiV1WorkersGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListWorkersApiV1WorkersGetQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create Worker
 */
export const createWorkerApiV1WorkersPost = (
  workerCreate: WorkerCreate,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<WorkerScheme>(
    {
      url: `/api/v1/workers`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: workerCreate,
    },
    options
  );
};

export const getCreateWorkerApiV1WorkersPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWorkerApiV1WorkersPost>>,
    TError,
    { data: WorkerCreate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createWorkerApiV1WorkersPost>>,
  TError,
  { data: WorkerCreate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createWorkerApiV1WorkersPost>>,
    { data: WorkerCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createWorkerApiV1WorkersPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateWorkerApiV1WorkersPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createWorkerApiV1WorkersPost>>
>;
export type CreateWorkerApiV1WorkersPostMutationBody = WorkerCreate;
export type CreateWorkerApiV1WorkersPostMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Create Worker
 */
export const useCreateWorkerApiV1WorkersPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWorkerApiV1WorkersPost>>,
    TError,
    { data: WorkerCreate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getCreateWorkerApiV1WorkersPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get Active Workers Count
 */
export const getActiveWorkersCountApiV1WorkersStatsActiveGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<WorkersStats>(
    { url: `/api/v1/workers/stats/active`, method: "GET", signal },
    options
  );
};

export const getGetActiveWorkersCountApiV1WorkersStatsActiveGetQueryKey =
  () => {
    return [`/api/v1/workers/stats/active`] as const;
  };

export const getGetActiveWorkersCountApiV1WorkersStatsActiveGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getActiveWorkersCountApiV1WorkersStatsActiveGet>
  >,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getActiveWorkersCountApiV1WorkersStatsActiveGet>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetActiveWorkersCountApiV1WorkersStatsActiveGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getActiveWorkersCountApiV1WorkersStatsActiveGet>>
  > = ({ signal }) =>
    getActiveWorkersCountApiV1WorkersStatsActiveGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getActiveWorkersCountApiV1WorkersStatsActiveGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetActiveWorkersCountApiV1WorkersStatsActiveGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getActiveWorkersCountApiV1WorkersStatsActiveGet>>
  >;
export type GetActiveWorkersCountApiV1WorkersStatsActiveGetQueryError =
  ErrorType<unknown>;

/**
 * @summary Get Active Workers Count
 */
export const useGetActiveWorkersCountApiV1WorkersStatsActiveGet = <
  TData = Awaited<
    ReturnType<typeof getActiveWorkersCountApiV1WorkersStatsActiveGet>
  >,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getActiveWorkersCountApiV1WorkersStatsActiveGet>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetActiveWorkersCountApiV1WorkersStatsActiveGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Read Worker
 */
export const readWorkerApiV1WorkersWorkerIdGet = (
  workerId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<WorkerScheme>(
    { url: `/api/v1/workers/${workerId}`, method: "GET", signal },
    options
  );
};

export const getReadWorkerApiV1WorkersWorkerIdGetQueryKey = (
  workerId: number
) => {
  return [`/api/v1/workers/${workerId}`] as const;
};

export const getReadWorkerApiV1WorkersWorkerIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof readWorkerApiV1WorkersWorkerIdGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  workerId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof readWorkerApiV1WorkersWorkerIdGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getReadWorkerApiV1WorkersWorkerIdGetQueryKey(workerId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof readWorkerApiV1WorkersWorkerIdGet>>
  > = ({ signal }) =>
    readWorkerApiV1WorkersWorkerIdGet(workerId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!workerId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof readWorkerApiV1WorkersWorkerIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ReadWorkerApiV1WorkersWorkerIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof readWorkerApiV1WorkersWorkerIdGet>>
>;
export type ReadWorkerApiV1WorkersWorkerIdGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Read Worker
 */
export const useReadWorkerApiV1WorkersWorkerIdGet = <
  TData = Awaited<ReturnType<typeof readWorkerApiV1WorkersWorkerIdGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  workerId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof readWorkerApiV1WorkersWorkerIdGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getReadWorkerApiV1WorkersWorkerIdGetQueryOptions(
    workerId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Delete Worker
 */
export const deleteWorkerApiV1WorkersWorkerIdDelete = (
  workerId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<WorkerScheme>(
    { url: `/api/v1/workers/${workerId}`, method: "DELETE" },
    options
  );
};

export const getDeleteWorkerApiV1WorkersWorkerIdDeleteMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWorkerApiV1WorkersWorkerIdDelete>>,
    TError,
    { workerId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteWorkerApiV1WorkersWorkerIdDelete>>,
  TError,
  { workerId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteWorkerApiV1WorkersWorkerIdDelete>>,
    { workerId: number }
  > = (props) => {
    const { workerId } = props ?? {};

    return deleteWorkerApiV1WorkersWorkerIdDelete(workerId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteWorkerApiV1WorkersWorkerIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteWorkerApiV1WorkersWorkerIdDelete>>
>;

export type DeleteWorkerApiV1WorkersWorkerIdDeleteMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Delete Worker
 */
export const useDeleteWorkerApiV1WorkersWorkerIdDelete = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWorkerApiV1WorkersWorkerIdDelete>>,
    TError,
    { workerId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getDeleteWorkerApiV1WorkersWorkerIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update Worker Settings
 */
export const updateWorkerSettingsApiV1WorkersWorkerIdSettingsPut = (
  workerId: number,
  updateWorkerSettingsApiV1WorkersWorkerIdSettingsPutBody: unknown,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<WorkerScheme>(
    {
      url: `/api/v1/workers/${workerId}/settings`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateWorkerSettingsApiV1WorkersWorkerIdSettingsPutBody,
    },
    options
  );
};

export const getUpdateWorkerSettingsApiV1WorkersWorkerIdSettingsPutMutationOptions =
  <TError = ErrorType<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof updateWorkerSettingsApiV1WorkersWorkerIdSettingsPut>
      >,
      TError,
      { workerId: number; data: unknown },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof updateWorkerSettingsApiV1WorkersWorkerIdSettingsPut>
    >,
    TError,
    { workerId: number; data: unknown },
    TContext
  > => {
    const { mutation: mutationOptions, request: requestOptions } =
      options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof updateWorkerSettingsApiV1WorkersWorkerIdSettingsPut>
      >,
      { workerId: number; data: unknown }
    > = (props) => {
      const { workerId, data } = props ?? {};

      return updateWorkerSettingsApiV1WorkersWorkerIdSettingsPut(
        workerId,
        data,
        requestOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type UpdateWorkerSettingsApiV1WorkersWorkerIdSettingsPutMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof updateWorkerSettingsApiV1WorkersWorkerIdSettingsPut>
    >
  >;
export type UpdateWorkerSettingsApiV1WorkersWorkerIdSettingsPutMutationBody =
  unknown;
export type UpdateWorkerSettingsApiV1WorkersWorkerIdSettingsPutMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Update Worker Settings
 */
export const useUpdateWorkerSettingsApiV1WorkersWorkerIdSettingsPut = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof updateWorkerSettingsApiV1WorkersWorkerIdSettingsPut>
    >,
    TError,
    { workerId: number; data: unknown },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getUpdateWorkerSettingsApiV1WorkersWorkerIdSettingsPutMutationOptions(
      options
    );

  return useMutation(mutationOptions);
};
/**
 * @summary Get Worker Status
 */
export const getWorkerStatusApiV1WorkersWorkerIdStatusGet = (
  workerId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<string>(
    { url: `/api/v1/workers/${workerId}/status`, method: "GET", signal },
    options
  );
};

export const getGetWorkerStatusApiV1WorkersWorkerIdStatusGetQueryKey = (
  workerId: number
) => {
  return [`/api/v1/workers/${workerId}/status`] as const;
};

export const getGetWorkerStatusApiV1WorkersWorkerIdStatusGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getWorkerStatusApiV1WorkersWorkerIdStatusGet>
  >,
  TError = ErrorType<HTTPValidationError>
>(
  workerId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWorkerStatusApiV1WorkersWorkerIdStatusGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetWorkerStatusApiV1WorkersWorkerIdStatusGetQueryKey(workerId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWorkerStatusApiV1WorkersWorkerIdStatusGet>>
  > = ({ signal }) =>
    getWorkerStatusApiV1WorkersWorkerIdStatusGet(
      workerId,
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    enabled: !!workerId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWorkerStatusApiV1WorkersWorkerIdStatusGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetWorkerStatusApiV1WorkersWorkerIdStatusGetQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getWorkerStatusApiV1WorkersWorkerIdStatusGet>>
  >;
export type GetWorkerStatusApiV1WorkersWorkerIdStatusGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Get Worker Status
 */
export const useGetWorkerStatusApiV1WorkersWorkerIdStatusGet = <
  TData = Awaited<
    ReturnType<typeof getWorkerStatusApiV1WorkersWorkerIdStatusGet>
  >,
  TError = ErrorType<HTTPValidationError>
>(
  workerId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWorkerStatusApiV1WorkersWorkerIdStatusGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetWorkerStatusApiV1WorkersWorkerIdStatusGetQueryOptions(
      workerId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Worker Logs
 */
export const getWorkerLogsApiV1WorkersWorkerIdLogsGet = (
  workerId: number,
  params?: GetWorkerLogsApiV1WorkersWorkerIdLogsGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ContainerMessage[]>(
    { url: `/api/v1/workers/${workerId}/logs`, method: "GET", params, signal },
    options
  );
};

export const getGetWorkerLogsApiV1WorkersWorkerIdLogsGetQueryKey = (
  workerId: number,
  params?: GetWorkerLogsApiV1WorkersWorkerIdLogsGetParams
) => {
  return [
    `/api/v1/workers/${workerId}/logs`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetWorkerLogsApiV1WorkersWorkerIdLogsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorkerLogsApiV1WorkersWorkerIdLogsGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  workerId: number,
  params?: GetWorkerLogsApiV1WorkersWorkerIdLogsGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWorkerLogsApiV1WorkersWorkerIdLogsGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetWorkerLogsApiV1WorkersWorkerIdLogsGetQueryKey(workerId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWorkerLogsApiV1WorkersWorkerIdLogsGet>>
  > = ({ signal }) =>
    getWorkerLogsApiV1WorkersWorkerIdLogsGet(
      workerId,
      params,
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    enabled: !!workerId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWorkerLogsApiV1WorkersWorkerIdLogsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetWorkerLogsApiV1WorkersWorkerIdLogsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWorkerLogsApiV1WorkersWorkerIdLogsGet>>
>;
export type GetWorkerLogsApiV1WorkersWorkerIdLogsGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Get Worker Logs
 */
export const useGetWorkerLogsApiV1WorkersWorkerIdLogsGet = <
  TData = Awaited<ReturnType<typeof getWorkerLogsApiV1WorkersWorkerIdLogsGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  workerId: number,
  params?: GetWorkerLogsApiV1WorkersWorkerIdLogsGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWorkerLogsApiV1WorkersWorkerIdLogsGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWorkerLogsApiV1WorkersWorkerIdLogsGetQueryOptions(
    workerId,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Start Worker
 */
export const startWorkerApiV1WorkersWorkerIdStartPost = (
  workerId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<string>(
    { url: `/api/v1/workers/${workerId}/start`, method: "POST" },
    options
  );
};

export const getStartWorkerApiV1WorkersWorkerIdStartPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof startWorkerApiV1WorkersWorkerIdStartPost>>,
    TError,
    { workerId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof startWorkerApiV1WorkersWorkerIdStartPost>>,
  TError,
  { workerId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof startWorkerApiV1WorkersWorkerIdStartPost>>,
    { workerId: number }
  > = (props) => {
    const { workerId } = props ?? {};

    return startWorkerApiV1WorkersWorkerIdStartPost(workerId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type StartWorkerApiV1WorkersWorkerIdStartPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof startWorkerApiV1WorkersWorkerIdStartPost>>
  >;

export type StartWorkerApiV1WorkersWorkerIdStartPostMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Start Worker
 */
export const useStartWorkerApiV1WorkersWorkerIdStartPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof startWorkerApiV1WorkersWorkerIdStartPost>>,
    TError,
    { workerId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getStartWorkerApiV1WorkersWorkerIdStartPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Stop Worker
 */
export const stopWorkerApiV1WorkersWorkerIdStopPost = (
  workerId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<string>(
    { url: `/api/v1/workers/${workerId}/stop`, method: "POST" },
    options
  );
};

export const getStopWorkerApiV1WorkersWorkerIdStopPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof stopWorkerApiV1WorkersWorkerIdStopPost>>,
    TError,
    { workerId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof stopWorkerApiV1WorkersWorkerIdStopPost>>,
  TError,
  { workerId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof stopWorkerApiV1WorkersWorkerIdStopPost>>,
    { workerId: number }
  > = (props) => {
    const { workerId } = props ?? {};

    return stopWorkerApiV1WorkersWorkerIdStopPost(workerId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type StopWorkerApiV1WorkersWorkerIdStopPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof stopWorkerApiV1WorkersWorkerIdStopPost>>
>;

export type StopWorkerApiV1WorkersWorkerIdStopPostMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Stop Worker
 */
export const useStopWorkerApiV1WorkersWorkerIdStopPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof stopWorkerApiV1WorkersWorkerIdStopPost>>,
    TError,
    { workerId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getStopWorkerApiV1WorkersWorkerIdStopPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Restart Worker
 */
export const restartWorkerApiV1WorkersWorkerIdRestartPost = (
  workerId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<string>(
    { url: `/api/v1/workers/${workerId}/restart`, method: "POST" },
    options
  );
};

export const getRestartWorkerApiV1WorkersWorkerIdRestartPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof restartWorkerApiV1WorkersWorkerIdRestartPost>>,
    TError,
    { workerId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof restartWorkerApiV1WorkersWorkerIdRestartPost>>,
  TError,
  { workerId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof restartWorkerApiV1WorkersWorkerIdRestartPost>>,
    { workerId: number }
  > = (props) => {
    const { workerId } = props ?? {};

    return restartWorkerApiV1WorkersWorkerIdRestartPost(
      workerId,
      requestOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type RestartWorkerApiV1WorkersWorkerIdRestartPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof restartWorkerApiV1WorkersWorkerIdRestartPost>>
  >;

export type RestartWorkerApiV1WorkersWorkerIdRestartPostMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Restart Worker
 */
export const useRestartWorkerApiV1WorkersWorkerIdRestartPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof restartWorkerApiV1WorkersWorkerIdRestartPost>>,
    TError,
    { workerId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getRestartWorkerApiV1WorkersWorkerIdRestartPostMutationOptions(options);

  return useMutation(mutationOptions);
};
