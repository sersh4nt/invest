/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  useMutation
} from 'react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  PageRobotScheme,
  HTTPValidationError,
  ListRobotsApiV1RobotsGetParams,
  PageWorkerScheme,
  ListWorkersApiV1WorkersGetParams,
  WorkerScheme,
  WorkerCreate
} from '../../models'
import { customInstance } from '.././axios'
import type { ErrorType } from '.././axios'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary List Robots
 */
export const listRobotsApiV1RobotsGet = (
    params?: ListRobotsApiV1RobotsGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<PageRobotScheme>(
      {url: `/api/v1/robots`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getListRobotsApiV1RobotsGetQueryKey = (params?: ListRobotsApiV1RobotsGetParams,) => [`/api/v1/robots`, ...(params ? [params]: [])];

    
export type ListRobotsApiV1RobotsGetQueryResult = NonNullable<Awaited<ReturnType<typeof listRobotsApiV1RobotsGet>>>
export type ListRobotsApiV1RobotsGetQueryError = ErrorType<HTTPValidationError>

export const useListRobotsApiV1RobotsGet = <TData = Awaited<ReturnType<typeof listRobotsApiV1RobotsGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ListRobotsApiV1RobotsGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listRobotsApiV1RobotsGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListRobotsApiV1RobotsGetQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listRobotsApiV1RobotsGet>>> = ({ signal }) => listRobotsApiV1RobotsGet(params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof listRobotsApiV1RobotsGet>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary List Workers
 */
export const listWorkersApiV1WorkersGet = (
    params?: ListWorkersApiV1WorkersGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<PageWorkerScheme>(
      {url: `/api/v1/workers`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getListWorkersApiV1WorkersGetQueryKey = (params?: ListWorkersApiV1WorkersGetParams,) => [`/api/v1/workers`, ...(params ? [params]: [])];

    
export type ListWorkersApiV1WorkersGetQueryResult = NonNullable<Awaited<ReturnType<typeof listWorkersApiV1WorkersGet>>>
export type ListWorkersApiV1WorkersGetQueryError = ErrorType<HTTPValidationError>

export const useListWorkersApiV1WorkersGet = <TData = Awaited<ReturnType<typeof listWorkersApiV1WorkersGet>>, TError = ErrorType<HTTPValidationError>>(
 params?: ListWorkersApiV1WorkersGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listWorkersApiV1WorkersGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListWorkersApiV1WorkersGetQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listWorkersApiV1WorkersGet>>> = ({ signal }) => listWorkersApiV1WorkersGet(params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof listWorkersApiV1WorkersGet>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Create Worker
 */
export const createWorkerApiV1WorkersPost = (
    workerCreate: WorkerCreate,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<WorkerScheme>(
      {url: `/api/v1/workers`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: workerCreate
    },
      options);
    }
  


    export type CreateWorkerApiV1WorkersPostMutationResult = NonNullable<Awaited<ReturnType<typeof createWorkerApiV1WorkersPost>>>
    export type CreateWorkerApiV1WorkersPostMutationBody = WorkerCreate
    export type CreateWorkerApiV1WorkersPostMutationError = ErrorType<HTTPValidationError>

    export const useCreateWorkerApiV1WorkersPost = <TError = ErrorType<HTTPValidationError>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createWorkerApiV1WorkersPost>>, TError,{data: WorkerCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createWorkerApiV1WorkersPost>>, {data: WorkerCreate}> = (props) => {
          const {data} = props ?? {};

          return  createWorkerApiV1WorkersPost(data,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof createWorkerApiV1WorkersPost>>, TError, {data: WorkerCreate}, TContext>(mutationFn, mutationOptions)
    }
    