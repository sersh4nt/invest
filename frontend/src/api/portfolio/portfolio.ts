/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from 'react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  PortfolioScheme,
  HTTPValidationError,
  PortfolioCostList,
  GetPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGetParams
} from '../../models'
import { customInstance } from '.././axios'
import type { ErrorType } from '.././axios'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Get Latest Portfolio
 */
export const getLatestPortfolioApiV1SubaccountsSubaccountIdPortfolioGet = (
    subaccountId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<PortfolioScheme>(
      {url: `/api/v1/subaccounts/${subaccountId}/portfolio`, method: 'get', signal
    },
      options);
    }
  

export const getGetLatestPortfolioApiV1SubaccountsSubaccountIdPortfolioGetQueryKey = (subaccountId: number,) => [`/api/v1/subaccounts/${subaccountId}/portfolio`];

    
export type GetLatestPortfolioApiV1SubaccountsSubaccountIdPortfolioGetQueryResult = NonNullable<Awaited<ReturnType<typeof getLatestPortfolioApiV1SubaccountsSubaccountIdPortfolioGet>>>
export type GetLatestPortfolioApiV1SubaccountsSubaccountIdPortfolioGetQueryError = ErrorType<HTTPValidationError>

export const useGetLatestPortfolioApiV1SubaccountsSubaccountIdPortfolioGet = <TData = Awaited<ReturnType<typeof getLatestPortfolioApiV1SubaccountsSubaccountIdPortfolioGet>>, TError = ErrorType<HTTPValidationError>>(
 subaccountId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLatestPortfolioApiV1SubaccountsSubaccountIdPortfolioGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLatestPortfolioApiV1SubaccountsSubaccountIdPortfolioGetQueryKey(subaccountId);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLatestPortfolioApiV1SubaccountsSubaccountIdPortfolioGet>>> = ({ signal }) => getLatestPortfolioApiV1SubaccountsSubaccountIdPortfolioGet(subaccountId, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof getLatestPortfolioApiV1SubaccountsSubaccountIdPortfolioGet>>, TError, TData>(queryKey, queryFn, {enabled: !!(subaccountId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Get Portfolio Cost
 */
export const getPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGet = (
    subaccountId: number,
    params?: GetPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<PortfolioCostList>(
      {url: `/api/v1/subaccounts/${subaccountId}/portfolio-cost`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGetQueryKey = (subaccountId: number,
    params?: GetPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGetParams,) => [`/api/v1/subaccounts/${subaccountId}/portfolio-cost`, ...(params ? [params]: [])];

    
export type GetPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGetQueryResult = NonNullable<Awaited<ReturnType<typeof getPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGet>>>
export type GetPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGetQueryError = ErrorType<HTTPValidationError>

export const useGetPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGet = <TData = Awaited<ReturnType<typeof getPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGet>>, TError = ErrorType<HTTPValidationError>>(
 subaccountId: number,
    params?: GetPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGetQueryKey(subaccountId,params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGet>>> = ({ signal }) => getPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGet(subaccountId,params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof getPortfolioCostApiV1SubaccountsSubaccountIdPortfolioCostGet>>, TError, TData>(queryKey, queryFn, {enabled: !!(subaccountId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

