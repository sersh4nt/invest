/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  useMutation
} from 'react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  UserRead,
  ErrorModel,
  HTTPValidationError,
  UserUpdate
} from '../../models'
import { customInstance } from '.././axios'
import type { ErrorType } from '.././axios'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Users:Current User
 */
export const usersCurrentUserApiV1UsersMeGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<UserRead>(
      {url: `/api/v1/users/me`, method: 'get', signal
    },
      options);
    }
  

export const getUsersCurrentUserApiV1UsersMeGetQueryKey = () => [`/api/v1/users/me`];

    
export type UsersCurrentUserApiV1UsersMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>>
export type UsersCurrentUserApiV1UsersMeGetQueryError = ErrorType<void>

export const useUsersCurrentUserApiV1UsersMeGet = <TData = Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError = ErrorType<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersCurrentUserApiV1UsersMeGetQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>> = ({ signal }) => usersCurrentUserApiV1UsersMeGet(requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof usersCurrentUserApiV1UsersMeGet>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Users:Patch Current User
 */
export const usersPatchCurrentUserApiV1UsersMePatch = (
    userUpdate: UserUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserRead>(
      {url: `/api/v1/users/me`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: userUpdate
    },
      options);
    }
  


    export type UsersPatchCurrentUserApiV1UsersMePatchMutationResult = NonNullable<Awaited<ReturnType<typeof usersPatchCurrentUserApiV1UsersMePatch>>>
    export type UsersPatchCurrentUserApiV1UsersMePatchMutationBody = UserUpdate
    export type UsersPatchCurrentUserApiV1UsersMePatchMutationError = ErrorType<ErrorModel | void | HTTPValidationError>

    export const useUsersPatchCurrentUserApiV1UsersMePatch = <TError = ErrorType<ErrorModel | void | HTTPValidationError>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersPatchCurrentUserApiV1UsersMePatch>>, TError,{data: UserUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersPatchCurrentUserApiV1UsersMePatch>>, {data: UserUpdate}> = (props) => {
          const {data} = props ?? {};

          return  usersPatchCurrentUserApiV1UsersMePatch(data,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof usersPatchCurrentUserApiV1UsersMePatch>>, TError, {data: UserUpdate}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @summary Users:User
 */
export const usersUserApiV1UsersIdGet = (
    id: unknown,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<UserRead>(
      {url: `/api/v1/users/${id}`, method: 'get', signal
    },
      options);
    }
  

export const getUsersUserApiV1UsersIdGetQueryKey = (id: unknown,) => [`/api/v1/users/${id}`];

    
export type UsersUserApiV1UsersIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>>
export type UsersUserApiV1UsersIdGetQueryError = ErrorType<void | HTTPValidationError>

export const useUsersUserApiV1UsersIdGet = <TData = Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError = ErrorType<void | HTTPValidationError>>(
 id: unknown, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersUserApiV1UsersIdGetQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>> = ({ signal }) => usersUserApiV1UsersIdGet(id, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof usersUserApiV1UsersIdGet>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Users:Delete User
 */
export const usersDeleteUserApiV1UsersIdDelete = (
    id: unknown,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/api/v1/users/${id}`, method: 'delete'
    },
      options);
    }
  


    export type UsersDeleteUserApiV1UsersIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof usersDeleteUserApiV1UsersIdDelete>>>
    
    export type UsersDeleteUserApiV1UsersIdDeleteMutationError = ErrorType<HTTPValidationError>

    export const useUsersDeleteUserApiV1UsersIdDelete = <TError = ErrorType<HTTPValidationError>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersDeleteUserApiV1UsersIdDelete>>, TError,{id: unknown}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersDeleteUserApiV1UsersIdDelete>>, {id: unknown}> = (props) => {
          const {id} = props ?? {};

          return  usersDeleteUserApiV1UsersIdDelete(id,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof usersDeleteUserApiV1UsersIdDelete>>, TError, {id: unknown}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @summary Users:Patch User
 */
export const usersPatchUserApiV1UsersIdPatch = (
    id: unknown,
    userUpdate: UserUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserRead>(
      {url: `/api/v1/users/${id}`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: userUpdate
    },
      options);
    }
  


    export type UsersPatchUserApiV1UsersIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof usersPatchUserApiV1UsersIdPatch>>>
    export type UsersPatchUserApiV1UsersIdPatchMutationBody = UserUpdate
    export type UsersPatchUserApiV1UsersIdPatchMutationError = ErrorType<ErrorModel | void | HTTPValidationError>

    export const useUsersPatchUserApiV1UsersIdPatch = <TError = ErrorType<ErrorModel | void | HTTPValidationError>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersPatchUserApiV1UsersIdPatch>>, TError,{id: unknown;data: UserUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersPatchUserApiV1UsersIdPatch>>, {id: unknown;data: UserUpdate}> = (props) => {
          const {id,data} = props ?? {};

          return  usersPatchUserApiV1UsersIdPatch(id,data,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof usersPatchUserApiV1UsersIdPatch>>, TError, {id: unknown;data: UserUpdate}, TContext>(mutationFn, mutationOptions)
    }
    