/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  useMutation
} from 'react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  HTTPValidationError,
  BacktestCreate,
  BacktestRead
} from '../../models'
import { customInstance } from '.././axios'
import type { ErrorType } from '.././axios'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Init Backtest Task
 */
export const initBacktestTaskApiV1BacktestPost = (
    backtestCreate: BacktestCreate,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<unknown>(
      {url: `/api/v1/backtest`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: backtestCreate
    },
      options);
    }
  


    export type InitBacktestTaskApiV1BacktestPostMutationResult = NonNullable<Awaited<ReturnType<typeof initBacktestTaskApiV1BacktestPost>>>
    export type InitBacktestTaskApiV1BacktestPostMutationBody = BacktestCreate
    export type InitBacktestTaskApiV1BacktestPostMutationError = ErrorType<HTTPValidationError>

    export const useInitBacktestTaskApiV1BacktestPost = <TError = ErrorType<HTTPValidationError>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initBacktestTaskApiV1BacktestPost>>, TError,{data: BacktestCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof initBacktestTaskApiV1BacktestPost>>, {data: BacktestCreate}> = (props) => {
          const {data} = props ?? {};

          return  initBacktestTaskApiV1BacktestPost(data,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof initBacktestTaskApiV1BacktestPost>>, TError, {data: BacktestCreate}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @summary Read Backtest
 */
export const readBacktestApiV1BacktestBacktestIdGet = (
    backtestId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<BacktestRead>(
      {url: `/api/v1/backtest/${backtestId}`, method: 'get', signal
    },
      options);
    }
  

export const getReadBacktestApiV1BacktestBacktestIdGetQueryKey = (backtestId: string,) => [`/api/v1/backtest/${backtestId}`];

    
export type ReadBacktestApiV1BacktestBacktestIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof readBacktestApiV1BacktestBacktestIdGet>>>
export type ReadBacktestApiV1BacktestBacktestIdGetQueryError = ErrorType<HTTPValidationError>

export const useReadBacktestApiV1BacktestBacktestIdGet = <TData = Awaited<ReturnType<typeof readBacktestApiV1BacktestBacktestIdGet>>, TError = ErrorType<HTTPValidationError>>(
 backtestId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof readBacktestApiV1BacktestBacktestIdGet>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReadBacktestApiV1BacktestBacktestIdGetQueryKey(backtestId);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof readBacktestApiV1BacktestBacktestIdGet>>> = ({ signal }) => readBacktestApiV1BacktestBacktestIdGet(backtestId, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof readBacktestApiV1BacktestBacktestIdGet>>, TError, TData>(queryKey, queryFn, {enabled: !!(backtestId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

