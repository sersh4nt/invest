/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "react-query";
import type {
  BacktestCreate,
  BacktestRead,
  HTTPValidationError,
} from "../../models";
import { customInstance } from ".././axios";
import type { ErrorType } from ".././axios";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary Init Backtest Task
 */
export const initBacktestTaskApiV1BacktestPost = (
  backtestCreate: BacktestCreate,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    {
      url: `/api/v1/backtest`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: backtestCreate,
    },
    options
  );
};

export const getInitBacktestTaskApiV1BacktestPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof initBacktestTaskApiV1BacktestPost>>,
    TError,
    { data: BacktestCreate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof initBacktestTaskApiV1BacktestPost>>,
  TError,
  { data: BacktestCreate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof initBacktestTaskApiV1BacktestPost>>,
    { data: BacktestCreate }
  > = (props) => {
    const { data } = props ?? {};

    return initBacktestTaskApiV1BacktestPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type InitBacktestTaskApiV1BacktestPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof initBacktestTaskApiV1BacktestPost>>
>;
export type InitBacktestTaskApiV1BacktestPostMutationBody = BacktestCreate;
export type InitBacktestTaskApiV1BacktestPostMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Init Backtest Task
 */
export const useInitBacktestTaskApiV1BacktestPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof initBacktestTaskApiV1BacktestPost>>,
    TError,
    { data: BacktestCreate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getInitBacktestTaskApiV1BacktestPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Read Backtest
 */
export const readBacktestApiV1BacktestBacktestIdGet = (
  backtestId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<BacktestRead>(
    { url: `/api/v1/backtest/${backtestId}`, method: "GET", signal },
    options
  );
};

export const getReadBacktestApiV1BacktestBacktestIdGetQueryKey = (
  backtestId: string
) => {
  return [`/api/v1/backtest/${backtestId}`] as const;
};

export const getReadBacktestApiV1BacktestBacktestIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof readBacktestApiV1BacktestBacktestIdGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  backtestId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof readBacktestApiV1BacktestBacktestIdGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getReadBacktestApiV1BacktestBacktestIdGetQueryKey(backtestId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof readBacktestApiV1BacktestBacktestIdGet>>
  > = ({ signal }) =>
    readBacktestApiV1BacktestBacktestIdGet(backtestId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!backtestId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof readBacktestApiV1BacktestBacktestIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ReadBacktestApiV1BacktestBacktestIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof readBacktestApiV1BacktestBacktestIdGet>>
>;
export type ReadBacktestApiV1BacktestBacktestIdGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Read Backtest
 */
export const useReadBacktestApiV1BacktestBacktestIdGet = <
  TData = Awaited<ReturnType<typeof readBacktestApiV1BacktestBacktestIdGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  backtestId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof readBacktestApiV1BacktestBacktestIdGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getReadBacktestApiV1BacktestBacktestIdGetQueryOptions(
    backtestId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
