/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * Invest API
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "react-query";
import type {
  AccountCreate,
  AccountScheme,
  AccountUpdate,
  HTTPValidationError,
  SubaccountScheme,
  SubaccountUpdate,
} from "../../models";
import { customInstance } from ".././axios";
import type { ErrorType } from ".././axios";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary Get Accounts List
 */
export const getAccountsListApiV1AccountsGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AccountScheme[]>(
    { url: `/api/v1/accounts`, method: "GET", signal },
    options
  );
};

export const getGetAccountsListApiV1AccountsGetQueryKey = () => {
  return [`/api/v1/accounts`] as const;
};

export const getGetAccountsListApiV1AccountsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountsListApiV1AccountsGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAccountsListApiV1AccountsGet>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAccountsListApiV1AccountsGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAccountsListApiV1AccountsGet>>
  > = ({ signal }) => getAccountsListApiV1AccountsGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccountsListApiV1AccountsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountsListApiV1AccountsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccountsListApiV1AccountsGet>>
>;
export type GetAccountsListApiV1AccountsGetQueryError = ErrorType<unknown>;

/**
 * @summary Get Accounts List
 */
export const useGetAccountsListApiV1AccountsGet = <
  TData = Awaited<ReturnType<typeof getAccountsListApiV1AccountsGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAccountsListApiV1AccountsGet>>,
    TError,
    TData
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAccountsListApiV1AccountsGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create Account
 */
export const createAccountApiV1AccountsPost = (
  accountCreate: AccountCreate,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<AccountScheme>(
    {
      url: `/api/v1/accounts`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: accountCreate,
    },
    options
  );
};

export const getCreateAccountApiV1AccountsPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAccountApiV1AccountsPost>>,
    TError,
    { data: AccountCreate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAccountApiV1AccountsPost>>,
  TError,
  { data: AccountCreate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAccountApiV1AccountsPost>>,
    { data: AccountCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createAccountApiV1AccountsPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateAccountApiV1AccountsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAccountApiV1AccountsPost>>
>;
export type CreateAccountApiV1AccountsPostMutationBody = AccountCreate;
export type CreateAccountApiV1AccountsPostMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Create Account
 */
export const useCreateAccountApiV1AccountsPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAccountApiV1AccountsPost>>,
    TError,
    { data: AccountCreate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getCreateAccountApiV1AccountsPostMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get Account
 */
export const getAccountApiV1AccountsAccountIdGet = (
  accountId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<AccountScheme>(
    { url: `/api/v1/accounts/${accountId}`, method: "GET", signal },
    options
  );
};

export const getGetAccountApiV1AccountsAccountIdGetQueryKey = (
  accountId: number
) => {
  return [`/api/v1/accounts/${accountId}`] as const;
};

export const getGetAccountApiV1AccountsAccountIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountApiV1AccountsAccountIdGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  accountId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAccountApiV1AccountsAccountIdGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAccountApiV1AccountsAccountIdGetQueryKey(accountId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAccountApiV1AccountsAccountIdGet>>
  > = ({ signal }) =>
    getAccountApiV1AccountsAccountIdGet(accountId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!accountId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccountApiV1AccountsAccountIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountApiV1AccountsAccountIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccountApiV1AccountsAccountIdGet>>
>;
export type GetAccountApiV1AccountsAccountIdGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Get Account
 */
export const useGetAccountApiV1AccountsAccountIdGet = <
  TData = Awaited<ReturnType<typeof getAccountApiV1AccountsAccountIdGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  accountId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAccountApiV1AccountsAccountIdGet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAccountApiV1AccountsAccountIdGetQueryOptions(
    accountId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Edit Account
 */
export const editAccountApiV1AccountsAccountIdPut = (
  accountId: number,
  accountUpdate: AccountUpdate,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<AccountScheme>(
    {
      url: `/api/v1/accounts/${accountId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: accountUpdate,
    },
    options
  );
};

export const getEditAccountApiV1AccountsAccountIdPutMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editAccountApiV1AccountsAccountIdPut>>,
    TError,
    { accountId: number; data: AccountUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof editAccountApiV1AccountsAccountIdPut>>,
  TError,
  { accountId: number; data: AccountUpdate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editAccountApiV1AccountsAccountIdPut>>,
    { accountId: number; data: AccountUpdate }
  > = (props) => {
    const { accountId, data } = props ?? {};

    return editAccountApiV1AccountsAccountIdPut(
      accountId,
      data,
      requestOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type EditAccountApiV1AccountsAccountIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof editAccountApiV1AccountsAccountIdPut>>
>;
export type EditAccountApiV1AccountsAccountIdPutMutationBody = AccountUpdate;
export type EditAccountApiV1AccountsAccountIdPutMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Edit Account
 */
export const useEditAccountApiV1AccountsAccountIdPut = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editAccountApiV1AccountsAccountIdPut>>,
    TError,
    { accountId: number; data: AccountUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getEditAccountApiV1AccountsAccountIdPutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get Subaccounts
 */
export const getSubaccountsApiV1AccountsAccountIdSubaccountsGet = (
  accountId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<SubaccountScheme[]>(
    { url: `/api/v1/accounts/${accountId}/subaccounts`, method: "GET", signal },
    options
  );
};

export const getGetSubaccountsApiV1AccountsAccountIdSubaccountsGetQueryKey = (
  accountId: number
) => {
  return [`/api/v1/accounts/${accountId}/subaccounts`] as const;
};

export const getGetSubaccountsApiV1AccountsAccountIdSubaccountsGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof getSubaccountsApiV1AccountsAccountIdSubaccountsGet>
    >,
    TError = ErrorType<HTTPValidationError>
  >(
    accountId: number,
    options?: {
      query?: UseQueryOptions<
        Awaited<
          ReturnType<typeof getSubaccountsApiV1AccountsAccountIdSubaccountsGet>
        >,
        TError,
        TData
      >;
      request?: SecondParameter<typeof customInstance>;
    }
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetSubaccountsApiV1AccountsAccountIdSubaccountsGetQueryKey(accountId);

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof getSubaccountsApiV1AccountsAccountIdSubaccountsGet>
      >
    > = ({ signal }) =>
      getSubaccountsApiV1AccountsAccountIdSubaccountsGet(
        accountId,
        requestOptions,
        signal
      );

    return {
      queryKey,
      queryFn,
      enabled: !!accountId,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<typeof getSubaccountsApiV1AccountsAccountIdSubaccountsGet>
      >,
      TError,
      TData
    > & { queryKey: QueryKey };
  };

export type GetSubaccountsApiV1AccountsAccountIdSubaccountsGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getSubaccountsApiV1AccountsAccountIdSubaccountsGet>
    >
  >;
export type GetSubaccountsApiV1AccountsAccountIdSubaccountsGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Get Subaccounts
 */
export const useGetSubaccountsApiV1AccountsAccountIdSubaccountsGet = <
  TData = Awaited<
    ReturnType<typeof getSubaccountsApiV1AccountsAccountIdSubaccountsGet>
  >,
  TError = ErrorType<HTTPValidationError>
>(
  accountId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof getSubaccountsApiV1AccountsAccountIdSubaccountsGet>
      >,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetSubaccountsApiV1AccountsAccountIdSubaccountsGetQueryOptions(
      accountId,
      options
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Edit Subaccount
 */
export const editSubaccountApiV1SubaccountsSubaccountIdPut = (
  subaccountId: number,
  subaccountUpdate: SubaccountUpdate,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<SubaccountScheme>(
    {
      url: `/api/v1/subaccounts/${subaccountId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: subaccountUpdate,
    },
    options
  );
};

export const getEditSubaccountApiV1SubaccountsSubaccountIdPutMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editSubaccountApiV1SubaccountsSubaccountIdPut>>,
    TError,
    { subaccountId: number; data: SubaccountUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof editSubaccountApiV1SubaccountsSubaccountIdPut>>,
  TError,
  { subaccountId: number; data: SubaccountUpdate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editSubaccountApiV1SubaccountsSubaccountIdPut>>,
    { subaccountId: number; data: SubaccountUpdate }
  > = (props) => {
    const { subaccountId, data } = props ?? {};

    return editSubaccountApiV1SubaccountsSubaccountIdPut(
      subaccountId,
      data,
      requestOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type EditSubaccountApiV1SubaccountsSubaccountIdPutMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof editSubaccountApiV1SubaccountsSubaccountIdPut>>
  >;
export type EditSubaccountApiV1SubaccountsSubaccountIdPutMutationBody =
  SubaccountUpdate;
export type EditSubaccountApiV1SubaccountsSubaccountIdPutMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Edit Subaccount
 */
export const useEditSubaccountApiV1SubaccountsSubaccountIdPut = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editSubaccountApiV1SubaccountsSubaccountIdPut>>,
    TError,
    { subaccountId: number; data: SubaccountUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getEditSubaccountApiV1SubaccountsSubaccountIdPutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Cancel All Orders
 */
export const cancelAllOrdersApiV1SubaccountsSubaccountIdPost = (
  subaccountId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<unknown>(
    { url: `/api/v1/subaccounts/${subaccountId}`, method: "POST" },
    options
  );
};

export const getCancelAllOrdersApiV1SubaccountsSubaccountIdPostMutationOptions =
  <TError = ErrorType<HTTPValidationError>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof cancelAllOrdersApiV1SubaccountsSubaccountIdPost>
      >,
      TError,
      { subaccountId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof cancelAllOrdersApiV1SubaccountsSubaccountIdPost>>,
    TError,
    { subaccountId: number },
    TContext
  > => {
    const { mutation: mutationOptions, request: requestOptions } =
      options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof cancelAllOrdersApiV1SubaccountsSubaccountIdPost>
      >,
      { subaccountId: number }
    > = (props) => {
      const { subaccountId } = props ?? {};

      return cancelAllOrdersApiV1SubaccountsSubaccountIdPost(
        subaccountId,
        requestOptions
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type CancelAllOrdersApiV1SubaccountsSubaccountIdPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof cancelAllOrdersApiV1SubaccountsSubaccountIdPost>>
  >;

export type CancelAllOrdersApiV1SubaccountsSubaccountIdPostMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Cancel All Orders
 */
export const useCancelAllOrdersApiV1SubaccountsSubaccountIdPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cancelAllOrdersApiV1SubaccountsSubaccountIdPost>>,
    TError,
    { subaccountId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions =
    getCancelAllOrdersApiV1SubaccountsSubaccountIdPostMutationOptions(options);

  return useMutation(mutationOptions);
};
