from src.instrument.flows import UpdateCurrenciesFlow
flow = UpdateCurrenciesFlow()
flow.run()
from src.instrument.flows import UpdateCurrenciesFlow
flow = UpdateCurrenciesFlow()
flow.run()
from src.config import settings
from src.db.session import get_sync_session
from tinkoff.invest import Client
with Client(settings.TINKOFF_TOKEN) as client:
	shares = client.instruments.shares()
shares = shares.instruments
from decimal import Decimal
sh = [{'figi': s.figi, 'type': 'share', 'ticker': s.ticker, 'lot': s.lot, 'currency': s.currency, 'name': s.name, 'min_price_increment': Decimal(s.min_price_increment.units) + Decimal(s.min_price_increment.nano) / 1_000_000_000, 'uid': s.uid} for s in shares]
db = next(get_sync_session())
from sqlalchemy import insert
from src.instrument.models import Share
stmt = insert(Share).values(sh)
db.execute(stmt)
asd = [Currency(**a) for a in sh]
asd = [Share(**a) for a in sh]
db.add_all(asd)
db.commit()
db.rollback()
db.add_all(asd)
db.commit()
db.add_all(asd)
db.commit()
db.rollback()
db.add_all(asd)
db.commit()
db.rollback()
db.add_all(asd)
db.commit()
from src.instrument.flows import *
f2 = UpdateInstrumentsFlow()
f2.run()
from src.instrument.flows import *
f1 = UpdateInstrumentsFlow()
f1.run()
from src.instrument.flows import *
f1 = UpdateInstrumentsFlow()
f1.run()
from src.instrument.flows import *
f1 = UpdateInstrumentsFlow()
f1.run()
from src.instrument.flows import *
f = UpdateCurrenciesFlow()
f.run()
from src.instrument.flows import *
f = UpdateInstrumentsFlow()
f.run()
from src.instrument.flows import *
f = UpdateInstrumentsFlow()
f.run()
from src.instrument.flows import *
f = UpdateInstrumentsFlow()
f.run()
from src.instrument.flows import *
f1 = UpdateCurrenciesFlow()
f1.run()
from src.instrument.flows import *
f1.run()
f1 = UpdateCurrenciesFlow()
f1.run()
f2 = UpdateInstrumentsFlow()
f2.run()
from src.instrument.flows import *
f2 = UpdateInstrumentsFlow()
f2.run()
from src.instrument.flows import *
f2 = UpdateInstrumentsFlow()
f2.run()
from src.instrument.flows improt *
from src.instrument.flows import *
f = UpdateBondsFlow()
f.run()
f._get_orm_class()
stmt = insert(Bonds)
stmt = insert(Bond)
stmt.excluded
dir(stmt.excluded)
stmt = insert(Bond).values([])
dir(stmt.excluded)
from src.instrument.flows import *
f = UpdateBondsFlow()
f.run()
from src.instrument.flows import *
f = UpdateBondsFlow()
f.run()
from src.instrument.flows import *
f = UpdateBondsFlow()
f.run()
from src.instrument.flows import *
f = UpdateBondsFlow()
f.run()
from src.instrument.flows import *
f = UpdateBondsFlow()
f.run()
from src.instrument.flows import *
f = UpdateBondsFlow()
f.run()
f = UpdateETFSFlow()
f.run()
from src.instrument.flows import *
f = UpdateCurrenciesFlow()
f.eun()
f.run()
f = UpdateBondsFlow()
f.run()
from src.instrument.flows import *
f = UpdateBondsFlow()
f.run()
from src.instrument.flows import *
f = UpdateBondsFlow()
f.run()
from src.instrument.flows import *
f = UpdateBondsFlow()
f.run()
f = UpdateETFSFlow()
f.run()
f = UpdateSharesFlow()
f.run()
f = UpdateFuturesFlow()
f.run()
f = UpdateOptionsFlow()
f.run()
from src.instrument.flows import *
f = UpdateOptionsFlow()
f.run()
from src.instrument.flows import *
f = UpdateOptionsFlow()
f.run()
from src.instrument.flows import *
f = UpdateOptionsFlow()
f.run()
from src.instrument.flows import *
f = UpdateOptionsFlow()
f.run()
from src.instrument.flows import *
f = UpdateOptionsFlow()
f.run()
from src.instrument.flows import *
f = UpdateOptionsFlow()
f.run()
from src.instrument.flows import *
f = UpdateOptionsFlow()
f.run()
from src.instrument.flows import *
f = UpdateOptionsFlow()
f.run()
from src.instrument.flows import *
f = UpdateOptionsFlow()
f.run()
from src.instrument.flows import *
f = UpdateOptionsFlow()
f.run()
from src.instrument.flows import *
f = UpdateOptionsFlow()
f.run()
from src.portfolio.flows import *
f = StorePortfolioFlow()
f.run()
f.run(1)
from src.db import base
f.run(1)
