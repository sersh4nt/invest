"""Add arbitrage settings, change models.

Revision ID: 9e0c7c13ef1d
Revises: 85727ffc6696
Create Date: 2023-11-28 15:57:25.067786

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "9e0c7c13ef1d"
down_revision = "85727ffc6696"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "arbitrage_deltas",
        sa.Column("share_figi", sa.String(length=12), nullable=False),
        sa.Column("future_figi", sa.String(length=12), nullable=False),
        sa.Column("d_take_calculated", sa.Float(), nullable=True),
        sa.Column("d_return_calculated", sa.Float(), nullable=True),
        sa.Column("d_take", sa.Float(), nullable=True),
        sa.Column("d_return", sa.Float(), nullable=True),
        sa.Column("volume", sa.Integer(), nullable=False),
        sa.Column("spread_required", sa.Float(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("arbitrage_deltas_pkey")),
    )
    op.create_index(
        op.f("arbitrage_deltas_id_idx"), "arbitrage_deltas", ["id"], unique=False
    )
    op.add_column("accounts", sa.Column("is_sandbox", sa.Boolean(), nullable=True))
    op.alter_column(
        "backtest_results",
        "robot_config",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        nullable=False,
    )
    op.alter_column(
        "backtest_results",
        "results",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        nullable=False,
    )
    op.alter_column(
        "currencies", "iso", existing_type=sa.VARCHAR(length=3), nullable=False
    )
    op.alter_column(
        "instrument_metrics", "figi", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        "instruments", "currency", existing_type=sa.VARCHAR(length=3), nullable=False
    )
    op.alter_column(
        "operation_trades", "operation_id", existing_type=sa.BIGINT(), nullable=False
    )
    op.alter_column(
        "operation_trades",
        "date",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "operation_trades", "quantity", existing_type=sa.BIGINT(), nullable=False
    )
    op.alter_column(
        "operations", "subaccount_id", existing_type=sa.BIGINT(), nullable=False
    )
    op.alter_column(
        "portfolio", "subaccount_id", existing_type=sa.BIGINT(), nullable=False
    )
    op.alter_column(
        "portfolio",
        "date_added",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint("portfolio_subaccount_id_fkey", "portfolio", type_="foreignkey")
    op.create_foreign_key(
        op.f("portfolio_subaccount_id_fkey"),
        "portfolio",
        "subaccounts",
        ["subaccount_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "portfolio_cost", "portfolio_id", existing_type=sa.BIGINT(), nullable=False
    )
    op.drop_constraint(
        "portfolio_cost_portfolio_id_fkey", "portfolio_cost", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("portfolio_cost_portfolio_id_fkey"),
        "portfolio_cost",
        "portfolio",
        ["portfolio_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "portfolio_positions", "portfolio_id", existing_type=sa.BIGINT(), nullable=False
    )
    op.alter_column(
        "portfolio_positions", "instrument_uid", existing_type=sa.UUID(), nullable=False
    )
    op.drop_constraint(
        "portfolio_positions_portfolio_id_fkey",
        "portfolio_positions",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("portfolio_positions_portfolio_id_fkey"),
        "portfolio_positions",
        "portfolio",
        ["portfolio_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column("robots", "creator_id", existing_type=sa.UUID(), nullable=False)
    op.drop_constraint("robots_creator_id_fkey", "robots", type_="foreignkey")
    op.create_foreign_key(
        op.f("robots_creator_id_fkey"),
        "robots",
        "users",
        ["creator_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.drop_constraint("subaccounts_account_id_fkey", "subaccounts", type_="foreignkey")
    op.create_foreign_key(
        op.f("subaccounts_account_id_fkey"),
        "subaccounts",
        "accounts",
        ["account_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column("workers", "robot_id", existing_type=sa.BIGINT(), nullable=False)
    op.alter_column("workers", "user_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column(
        "workers", "subaccount_id", existing_type=sa.BIGINT(), nullable=False
    )
    op.alter_column(
        "workers",
        "config",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        nullable=False,
    )
    op.alter_column("workers", "is_enabled", existing_type=sa.BOOLEAN(), nullable=False)
    op.drop_constraint("workers_subaccount_id_fkey", "workers", type_="foreignkey")
    op.drop_constraint("workers_user_id_fkey", "workers", type_="foreignkey")
    op.drop_constraint("workers_robot_id_fkey", "workers", type_="foreignkey")
    op.create_foreign_key(
        op.f("workers_user_id_fkey"),
        "workers",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("workers_subaccount_id_fkey"),
        "workers",
        "subaccounts",
        ["subaccount_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("workers_robot_id_fkey"),
        "workers",
        "robots",
        ["robot_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("workers_robot_id_fkey"), "workers", type_="foreignkey")
    op.drop_constraint(
        op.f("workers_subaccount_id_fkey"), "workers", type_="foreignkey"
    )
    op.drop_constraint(op.f("workers_user_id_fkey"), "workers", type_="foreignkey")
    op.create_foreign_key(
        "workers_robot_id_fkey", "workers", "robots", ["robot_id"], ["id"]
    )
    op.create_foreign_key(
        "workers_user_id_fkey", "workers", "users", ["user_id"], ["id"]
    )
    op.create_foreign_key(
        "workers_subaccount_id_fkey",
        "workers",
        "subaccounts",
        ["subaccount_id"],
        ["id"],
    )
    op.alter_column("workers", "is_enabled", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column(
        "workers",
        "config",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "workers", "subaccount_id", existing_type=sa.BIGINT(), nullable=True
    )
    op.alter_column("workers", "user_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("workers", "robot_id", existing_type=sa.BIGINT(), nullable=True)
    op.drop_constraint(
        op.f("subaccounts_account_id_fkey"), "subaccounts", type_="foreignkey"
    )
    op.create_foreign_key(
        "subaccounts_account_id_fkey", "subaccounts", "accounts", ["account_id"], ["id"]
    )
    op.drop_constraint(op.f("robots_creator_id_fkey"), "robots", type_="foreignkey")
    op.create_foreign_key(
        "robots_creator_id_fkey", "robots", "users", ["creator_id"], ["id"]
    )
    op.alter_column("robots", "creator_id", existing_type=sa.UUID(), nullable=True)
    op.drop_constraint(
        op.f("portfolio_positions_portfolio_id_fkey"),
        "portfolio_positions",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "portfolio_positions_portfolio_id_fkey",
        "portfolio_positions",
        "portfolio",
        ["portfolio_id"],
        ["id"],
    )
    op.alter_column(
        "portfolio_positions", "instrument_uid", existing_type=sa.UUID(), nullable=True
    )
    op.alter_column(
        "portfolio_positions", "portfolio_id", existing_type=sa.BIGINT(), nullable=True
    )
    op.drop_constraint(
        op.f("portfolio_cost_portfolio_id_fkey"), "portfolio_cost", type_="foreignkey"
    )
    op.create_foreign_key(
        "portfolio_cost_portfolio_id_fkey",
        "portfolio_cost",
        "portfolio",
        ["portfolio_id"],
        ["id"],
    )
    op.alter_column(
        "portfolio_cost", "portfolio_id", existing_type=sa.BIGINT(), nullable=True
    )
    op.drop_constraint(
        op.f("portfolio_subaccount_id_fkey"), "portfolio", type_="foreignkey"
    )
    op.create_foreign_key(
        "portfolio_subaccount_id_fkey",
        "portfolio",
        "subaccounts",
        ["subaccount_id"],
        ["id"],
    )
    op.alter_column(
        "portfolio",
        "date_added",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "portfolio", "subaccount_id", existing_type=sa.BIGINT(), nullable=True
    )
    op.alter_column(
        "operations", "subaccount_id", existing_type=sa.BIGINT(), nullable=True
    )
    op.alter_column(
        "operation_trades", "quantity", existing_type=sa.BIGINT(), nullable=True
    )
    op.alter_column(
        "operation_trades",
        "date",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.alter_column(
        "operation_trades", "operation_id", existing_type=sa.BIGINT(), nullable=True
    )
    op.alter_column(
        "instruments", "currency", existing_type=sa.VARCHAR(length=3), nullable=True
    )
    op.alter_column(
        "instruments", "figi", existing_type=sa.VARCHAR(length=12), nullable=True
    )
    op.alter_column(
        "instrument_metrics", "figi", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column(
        "currencies", "iso", existing_type=sa.VARCHAR(length=3), nullable=True
    )
    op.alter_column(
        "backtest_results",
        "results",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "backtest_results",
        "robot_config",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        nullable=True,
    )
    op.drop_column("accounts", "is_sandbox")
    op.drop_index(op.f("arbitrage_deltas_id_idx"), table_name="arbitrage_deltas")
    op.drop_table("arbitrage_deltas")
    # ### end Alembic commands ###
